version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: patient-service-db
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: # Add the networks section for postgres
      - internal
    healthcheck: # <--- ADD THIS SECTION
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}" ] # Check DB connection
      interval: 5s # Check every 5 seconds
      timeout: 5s  # Timeout after 5 seconds
      retries: 5   # Retry 5 times
      start_period: 10s # Give it 10 seconds to start before first health check

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-patient-mangement
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    networks: # Add the networks section for pgadmin to connect to the same network
      - internal
    depends_on: # It's good practice for pgadmin to wait for postgres too
      postgres:
        condition: service_healthy

  patient-service:
    image: patient-service-image:1.1
    container_name: patient-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME:  ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      BILLING_SERVICE_ADDRESS: billing-service
      BILLING_SERVICE_GRPC_PORT: 9001
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "4000:4000"
    networks: # Add the networks section for patient-service to connect to the same network
      - internal
    depends_on: # <--- MODIFY THIS SECTION
      postgres:
        condition: service_healthy # Wait until postgres reports healthy
      billing-service:
        condition: service_started
      kafka:
        condition: service_healthy


  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    image: billing-service-image:latest
    container_name: billing-service
    ports:
      - "4001:4001"
      - "9001:9001"
    networks: # Add the networks section for billing-service to connect to the same network
      - internal

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
    networks: # Add the networks section for kafka to connect to the same network
      - internal
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give Kafka time to fully initialize KRaft


volumes:
  pgdata:

networks: # Define the custom network
  internal:
    driver: bridge # Specify the network driver (bridge is common for user-defined networks)
